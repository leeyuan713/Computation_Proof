x <- rgamma(1, shape=a, rate=1)
u <- runif(1, min=0, max=h(x))
if(u*gamma(a)<=h(x))
{U[i,1] <- u
V[i,1] <- u*x}
}
which(U==0)
plot(U,V)
h(0)
a <- 3
n <- 1000
h <- function(x)
{
x^(a-1)*exp(-x)
}
U <- matrix(data=0,nrow=n,ncol=1)
V <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
u <- 1
x <- 0
while(u*gamma(a)<=h(x))
{ x <- rgamma(1, shape=a, rate=1)
u <- runif(1, min=0, max=h(x))
}
U[i,1] <- u
V[i,1] <- u*x
}
plot(U,V)
a <- 3
n <- 1000
h <- function(x)
{
x^(a-1)*exp(-x)
}
U <- matrix(data=0,nrow=n,ncol=1)
V <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
u <- 1
x <- 0
while(u*gamma(a)>h(x))
{ x <- rgamma(1, shape=a, rate=1)
u <- runif(1, min=0, max=h(x))
}
U[i,1] <- u
V[i,1] <- u*x
}
plot(U,V)
which(U==0)
plot(U,sqrt(h(V/U)))
plot(U,sqrt(h(V/U)),xlim=c(0,1),ylim=c(0,1))
plot(U,sqrt(h(V/U)),xlim=c(0,0.5),ylim=c(0,0.5))
sqrt(2)
a <- 3
n <- 1000
h <- function(x)
{
x^(a-1)*exp(-x)
}
U <- matrix(data=0,nrow=n,ncol=1)
V <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
u <- 1
x <- 0
while(u*gamma(a)>h(x))
{ x <- rgamma(1, shape=a, rate=1)
u <- runif(1, min=0, max=sqrt(h(x)))
}
U[i,1] <- u
V[i,1] <- u*x
}
plot(U,V)
plot(U,sqrt(h(V/U)),xlim=c(0,1),ylim=c(0,1))
a <- 3
n <- 1000
h <- function(x)
{
x^(a-1)*exp(-x)
}
U <- matrix(data=0,nrow=n,ncol=1)
V <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
u <- 1
v <- 0
while(u>sqrt(h(v/u)))
{ #x <- rgamma(1, shape=a, rate=1)
u <- runif(1, min=0, max=10)
v <- runif(1, min=0, max=10)
}
U[i,1] <- u
V[i,1] <- v
}
plot(U,V)
a <- 3
n <- 10000
h <- function(x)
{
x^(a-1)*exp(-x)
}
U <- matrix(data=0,nrow=n,ncol=1)
V <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
u <- 1
v <- 0
while(u>sqrt(h(v/u)))
{ #x <- rgamma(1, shape=a, rate=1)
u <- runif(1, min=0, max=10)
v <- runif(1, min=0, max=10)
}
U[i,1] <- u
V[i,1] <- v
}
plot(U,V)
plot(U,sqrt(h(V/U)),xlim=c(0,1),ylim=c(0,1))
gamma(a)/2
plot(V/U)
plot(V*gamma(a)/U)
plot(density(V*gamma(a)/U))
mean(V*gamma(a)/U)
var(V*gamma(a)/U)
var(V/U)
mean(V/U)
U2 <- matrix(data=0,nrow=n,ncol=1)
V2 <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
x <- rgamma(1, shape=a, scale=1)
u <- runif(1, min=0, max=sqrt(h(x)))
v <- u*x
U2[i,1] <- u
V2[i,1] <- v
}
plot(U,V)
plot(U2,V2)
plot(U2,sqrt(h(V2/U2)))
U2 <- matrix(data=0,nrow=n,ncol=1)
V2 <- matrix(data=0,nrow=n,ncol=1)
for(i in 1:n)
{
u <- 1
x <- 0
while(u>sqrt(h(x)))
{
x <- rgamma(1, shape=a, scale=1)
u <- runif(1, min=0, max=2*sqrt(h(x)))
}
v <- u*x
U2[i,1] <- u
V2[i,1] <- v
}
plot(U2,V2)
U2 <- matrix(data=0,nrow=n,ncol=1)
V2 <- matrix(data=0,nrow=n,ncol=1)
plot(U2,sqrt(h(V2/U2)))
plot(U2,V2)
for(i in 1:n)
{
u <- 1
x <- 0
while(u>sqrt(h(x)))
{
x <- rgamma(1, shape=a, scale=1)
u <- runif(1, min=0, max=2*sqrt(h(x)))
}
v <- u*x
U2[i,1] <- u
V2[i,1] <- v
}
plot(U2,V2)
1+1
gamma <- matrix(data=1, nrow=5, ncol=5)
gamma[1,] <- 10^3*c(1.15,-0.02,1.09,-0.02,-1.14)
gamma[2,] <- 10^3*c(-0.02,0.05,-0.02,0,0.01)
gamma[3,] <- 10^3*c(1.09,-0.02,1.14,-0.02,-1.14)
gamma[4,] <- 10^3*c(-0.02,0,-0.02,0.05,0.01)
gamma[5,] <- 10^3*c(-1.14,0.01,-1.14,0.01,1.19)
gamma
solve(gamma)
solve(solve(gamma))
Sigma <- solve(gamma)
print(Sigma[2,4])
print(Sigma[2,5]*Sigma[4,5]/(Sigma[5,5]))
k=1
p <- pvec2[k]
n <- nvec2[k]
### Define DHT matrix
DHTmatrix <- matrix(data=0, nrow=p, ncol=p)
for(j in 1:p)
{
for(i in 1:p)
{
DHTmatrix[j,i] <- sqrt(1/p)*(-1)^(j*i)
}
}
pvec2 <- c(256, 512, 1024, 2048)
nvec2 <- c(100, 200, 600, 1200)
k
p <- pvec2[k]
n <- nvec2[k]
### Define DHT matrix
DHTmatrix <- matrix(data=0, nrow=p, ncol=p)
for(j in 1:p)
{
for(i in 1:p)
{
DHTmatrix[j,i] <- sqrt(1/p)*(-1)^(j*i)
}
}
### Define Matrix A
A <- matrix(data=1, nrow=n, ncol=p)
for(i in 1:n)
{
for(j in 1:p)
{
A[i,j] <- runif(1, min=1/(2*n), max=1/n)
}
}
### Method A
newA <- A%*%DHTmatrix
max(newA*n)
min(newA*n)
p <- 16
n <- 5
### Define DHT matrix
DHTmatrix <- matrix(data=0, nrow=p, ncol=p)
for(j in 1:p)
{
for(i in 1:p)
{
DHTmatrix[j,i] <- sqrt(1/p)*(-1)^(j*i)
}
}
### Define Matrix A
DHTmatrix
t(DHTmatrix)%*%DHTmatrix
hadamard(4)
install.packages("survey")
hadamard(4)
library(survey)
hadamard(4)
hadamard(2)
hadamard(2)*2-1
p=2
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix\sqrt(p)
p=2
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
DHTmatrix
t(DHTmatrix)%*%DHTmatrix
p=4
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
DHTmatrix
t(DHTmatrix)%*%DHTmatrix
p=2
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
DHTmatrix
p=16
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
dim(DHTmatrix)
p=16
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
dim(DHTmatrix)
### Define DHT matrix
p=1024
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
dim(DHTmatrix)
p=10
DHTmatrix <- 2*hadamard(p/2)-1
DHTmatrix <- DHTmatrix/sqrt(p)
DHTmatrix
t(DHTmatrix)%*%DHTmatrix
intoBits(2)
intToBits(2)
intToBin(2)
gamma <- matrix(data=1, nrow=4, ncol=4)
gamma[1,] <- c(9.80, -3.59, 0, 0)
gamma[2,] <- c(-3.59, 34.3, -4.77, 0)
gamma[3,] <- c(0, -4.77, 34.3, -3.59)
gamma[4,] <- c(0, 0, -3.59, 9.8)
Sigma <- solve(gamma)
Sigma
Sigma[1,3] - Sigma[1,2]*Sigma[2,3]/Sigma[2,2]
Sigma[2,4] - Sigma[2,3]*Sigma[3,4]/Sigma[3,3]
prob <- function(a,b,c,d)
{
return(exp(0.1*(a+b+c+d)+2(a*b+b*c+c*d)))
}
m <- c(rep(1,4),rep(0,4))
permu <- combn(m,4)
head(permu)
m
unique(permu[1:4,])
prob <- function(a,b,c,d)
{
return(exp(0.1*(a+b+c+d)+2(a*b+b*c+c*d)))
}
permu <- matrix(data=0, nrow=16, ncol=1)
permu[1] <- prob(1,0,0,0)
permu[2] <- prob(0,1,0,0)
permu[3] <- prob(0,0,1,0)
permu[4] <- prob(0,0,0,1)
permu[5] <- prob(1,1,0,0)
permu[6] <- prob(1,0,1,0)
permu[7] <- prob(1,0,0,1)
permu[8] <- prob(0,1,1,0)
permu[9] <- prob(0,1,0,1)
permu[10] <- prob(0,0,1,1)
permu[11] <- prob(1,1,1,0)
permu[12] <- prob(1,1,0,1)
permu[13] <- prob(1,0,1,1)
permu[14] <- prob(0,0,0,0)
permu[15] <- prob(0,1,1,1)
permu[16] <- prob(1,1,1,1)
prob <- function(a,b,c,d)
{
return(exp(0.1*(a+b+c+d)+2(a*b+b*c+c*d)))
}
prob(0,1,1,1)
prob <- function(a,b,c,d)
{
(exp(0.1*(a+b+c+d)+2(a*b+b*c+c*d)))
}
prob(0,1,1,1)
prob <- function(a,b,c,d){
(exp(0.1*(a+b+c+d)+2(a*b+b*c+c*d)))
}
prob(0,1,1,1)
prob <- function(a,b,c,d){
(exp(0.1*(a+b+c+d)+2*(a*b+b*c+c*d)))
}
permu <- matrix(data=0, nrow=16, ncol=1)
permu[1] <- prob(1,0,0,0)
permu[2] <- prob(0,1,0,0)
permu[3] <- prob(0,0,1,0)
permu[4] <- prob(0,0,0,1)
permu[5] <- prob(1,1,0,0)
permu[6] <- prob(1,0,1,0)
permu[7] <- prob(1,0,0,1)
permu[8] <- prob(0,1,1,0)
permu[9] <- prob(0,1,0,1)
permu[10] <- prob(0,0,1,1)
permu[11] <- prob(1,1,1,0)
permu[12] <- prob(1,1,0,1)
permu[13] <- prob(1,0,1,1)
permu[14] <- prob(0,0,0,0)
permu[15] <- prob(0,1,1,1)
permu[16] <- prob(1,1,1,1)
permu <- permu/(sum(permu))
permu
sum(permu)
p1 <- permu[1]+sum(permu[5:7])+sum(permu[11:13])+permu[16]
p1
p1*(1-p1)
p2 <- permu[2]+permu[5]+sum(permu[8:9])+sum(permu[11:12])
p2*(1-p2)
p2 <- permu[2]+permu[5]+sum(permu[8:9])+sum(permu[11:12])+sum(permu[15:16])
p2*(1-p2)
Sigma[1,4] - Sigma[1,2]*Sigma[2,4]/Sigma[2,2]
source('~/Dropbox/Class_2015Spring/Stat771/project/glasso/timingcomparisons.r')
getwd()
method <- "blockdiag"
setwd("~/Dropbox/Class_2015Spring/Stat771/project/")
getwd()
method <- "blockdiag"
cat(method, fill=TRUE)
A <- matrix(data=2,nrow=2,ncol=2)
A[1,2] <- 0
A[2,1] <- 0
A
eigen(A)
msqrt(A)
msqrt <- function(Sigma){ # take a square root of a symmetric p.s.d. matrix
if(sum((Sigma-t(Sigma))^2)>1e-7) stop("Sigma must be symmetric.")
eig <- eigen(Sigma)
return(eig$vectors%*%diag(sqrt(eig$values))%*%t(eig$vectors))
}
msqrt(A)
data()
date()
getwd()
setwd("/Users/yuanli/Dropbox/Class_2015Spring/Stat771/project/Computation_Proof/")
r = read.table("SimTimesBLOCKDIAGSparsityLevel0.2.txt")
str(r)
r$Sim1
str(r$Sim1)
r$Sim1[2]
print(r$Sim1[2])
a <- r$Sim1[2]
a
a <- as.matrix(r$Sim1[2])
a
a <- as.numeric(r$Sim1[2])
a
a <- as.factor(r$Sim1[2])
a
a <- r$Sim1[2]
a
a <- as.character(r$Sim1[2])
a
as.name(a)
as.symbol(a)
as.symbol(as.symbol(a))
a <- r$Sim1[2]
a
as.name(a)
as.symbol(a)
noquote(as.character(a))
str(noquote(as.character(a)))
getwd()
str(Block1)
Block1 <- read.table("SimTimesBLOCKDIAGSparsityLevel0.2.txt")
Block2 <- read.table("SimTimesBLOCKDIAGSparsityLevel0.5.txt")
Block3 <- read.table("SimTimesBLOCKDIAGSparsityLevel0.9.txt")
MB1 <- read.table("SimTimesMBSparsityLevel0.2.txt")
MB2 <- read.table("SimTimesMBSparsityLevel0.5.txt")
MB3 <- read.table("SimTimesMBSparsityLevel0.9.txt")
Noscr1 <- read.table("SimTimesNOSCREENINGSparsityLevel0.2.txt")
Noscr2 <- read.table("SimTimesNOSCREENINGSparsityLevel0.5.txt")
Noscr3 <- read.table("SimTimesNOSCREENINGSparsityLevel0.9.txt")
Scr1 <- read.table("SimTimesSCREENINGSparsityLevel0.2.txt")
Scr2 <- read.table("SimTimesNOSCREENINGSparsityLevel0.5.txt")
Scr3 <- read.table("SimTimesSCREENINGSparsityLevel0.9.txt")
str(Block1)
results <- matrix(data=0, nrow=4, ncol=3)
rownames(results) <- c("Original","Algorithm_1","Algorithm_2")
colnames(results) <- c("Simu_1","Simu_2","Simu_3")
Sparsity2 <- list(results, results, results)
results <- matrix(data=0, nrow=4, ncol=3)
rownames(results) <- c("Original","Algorithm_1","Algorithm_2","MB_Approx")
colnames(results) <- c("Simu_1","Simu_2","Simu_3")
Sparsity2 <- list(results, results, results)
Sparsity2[[1]][1,1]
Sparsity2[[1]]
Block1
as.matrix(Block1)
as.matrix(Block1)[1,]
noquate(as.matrix(Block1)[1,])
noquote(as.matrix(Block1)[1,])
results <- matrix(data=0, nrow=4, ncol=3)
rownames(results) <- c("Original","Algorithm_1","Algorithm_2","MB_Approx")
colnames(results) <- c("Simu_1","Simu_2","Simu_3")
Sparsity2 <- list(results, results, results)
for(i in 1:3)
{
Sparsity2[[i]][1,] <- noquote(as.matrix(Block1[i,]))
Sparsity2[[i]][2,] <- noquote(as.matrix(MB1[i,]))
Sparsity2[[i]][3,] <- noquote(as.matrix(Noscr1[i,]))
Sparsity2[[i]][4,] <- noquote(as.matrix(Scr1[i,]))
}
Sprsity2[[1]]
Sprasity2[[1]]
Sparsity2[[1]]
results <- matrix(data=0, nrow=4, ncol=3)
rownames(results) <- c("Original","Algorithm_1","Algorithm_2","MB_Approx")
colnames(results) <- c("Simu_1","Simu_2","Simu_3")
Sparsity2 <- list(results, results, results)
for(i in 1:3)
{
Sparsity2[[i]][1,] <- noquote(as.matrix(Noscr1[i,]))
Sparsity2[[i]][2,] <- noquote(as.matrix(Scr1([i,])))
Sparsity2[[i]][3,] <- noquote(as.matrix(Block1[i,]))
Sparsity2[[i]][4,] <- noquote(as.matrix(MB1[i,]))
}
for(i in 1:3)
{
Sparsity2[[i]][1,] <- noquote(as.matrix(Noscr1[i,]))
Sparsity2[[i]][2,] <- noquote(as.matrix(Scr1[i,]))
Sparsity2[[i]][3,] <- noquote(as.matrix(Block1[i,]))
Sparsity2[[i]][4,] <- noquote(as.matrix(MB1[i,]))
}
Sparsity2[[1]]
Sparsity2[[2]]
Block1 <- read.table("SimTimesBLOCKDIAGSparsityLevel0.2.txt")
Block2 <- read.table("SimTimesBLOCKDIAGSparsityLevel0.5.txt")
Block3 <- read.table("SimTimesBLOCKDIAGSparsityLevel0.9.txt")
MB1 <- read.table("SimTimesMBSparsityLevel0.2.txt")
MB2 <- read.table("SimTimesMBSparsityLevel0.5.txt")
MB3 <- read.table("SimTimesMBSparsityLevel0.9.txt")
Noscr1 <- read.table("SimTimesNOSCREENINGSparsityLevel0.2.txt")
Noscr2 <- read.table("SimTimesNOSCREENINGSparsityLevel0.5.txt")
Noscr3 <- read.table("SimTimesNOSCREENINGSparsityLevel0.9.txt")
Scr1 <- read.table("SimTimesSCREENINGSparsityLevel0.2.txt")
Scr2 <- read.table("SimTimesSCREENINGSparsityLevel0.5.txt")
Scr3 <- read.table("SimTimesSCREENINGSparsityLevel0.9.txt")
results <- matrix(data=0, nrow=4, ncol=3)
rownames(results) <- c("Original","Algorithm_1","Algorithm_2","MB_Approx")
colnames(results) <- c("Simu_1","Simu_2","Simu_3")
Sparsity2 <- list(results, results, results)
for(i in 1:3)
{
Sparsity2[[i]][1,] <- noquote(as.matrix(Noscr1[i,]))
Sparsity2[[i]][2,] <- noquote(as.matrix(Scr1[i,]))
Sparsity2[[i]][3,] <- noquote(as.matrix(Block1[i,]))
Sparsity2[[i]][4,] <- noquote(as.matrix(MB1[i,]))
}
Sparsity2[[1]]
Sparsity2[[2]]
Sparsity2[[3]]
names(Sparsity2) <- c("p=100", "p=800", "p=1500")
Sparsity2
table(Sparsity2)
noquote(Sparsity2)
